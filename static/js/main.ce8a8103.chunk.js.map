{"version":3,"sources":["components/movie-search.js","components/favourites.js","App.js","serviceWorker.js","index.js"],"names":["MovieSearch","props","setValues","e","setState","target","name","value","getData","preventDefault","url","state","title","type","console","log","fetch","then","response","json","data","prevState","dataArray","handleFavourite","item","index","favourite","arr","localStorage","setItem","JSON","stringify","this","className","onChange","placeholder","required","onClick","map","Response","key","src","Poster","alt","Title","Released","href","class","data-dismiss","aria-label","Error","Component","Favourites","favouritesMovies","parse","getItem","App","to","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ce8a8103.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport \"jquery\";\r\nimport 'bootstrap/dist/js/bootstrap.min.js';\r\n\r\nclass MovieSearch extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      dataArray: [],\r\n      title: \"\",\r\n      type:\"\"\r\n    }\r\n  }\r\n  setValues = (e) => {\r\n    this.setState({[e.target.name]: e.target.value});\r\n  }\r\n  getData = (e) => {\r\n    e.preventDefault();\r\n    let url = \"https://www.omdbapi.com/?apikey=4551086f&t=\" + this.state.title + \"&type=\" + this.state.type;\r\n    console.log(url);\r\n    fetch(`${url}`)\r\n      .then(response => response.json())\r\n      .then(data => {\r\n      this.setState(prevState => ({\r\n        dataArray: [...prevState.dataArray, data]\r\n      }))\r\n    })\r\n  }\r\n  handleFavourite = (item,index) => {\r\n    if(!item.favourite) {\r\n      item.favourite = true\r\n    }\r\n    else {\r\n      item.favourite = !item.favourite;\r\n    }\r\n    const arr = this.state.dataArray;\r\n    arr[index] = item;\r\n    this.setState({dataArray: arr});\r\n    localStorage.setItem('moviesArray', JSON.stringify(arr));\r\n  }\r\n  render() {\r\n    const {dataArray} = this.state;\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"col-5 offset-md-3 my-4\">\r\n          <form className=\"form-inline\">\r\n            <div className=\"form-group mr-2\" onChange={this.setValues}>\r\n              <input className=\"form-control border border-dark\" placeholder=\"Title\" type=\"text\" name=\"title\" required />\r\n            </div>\r\n            <div className=\"form-group mr-2\">\r\n              <select className=\"form-control border border-dark\" name=\"type\" onChange={this.setValues}>\r\n                <option value=\"\">--select--</option>\r\n                <option value=\"all\">All</option>\r\n                <option value=\"movie\">Movie</option>\r\n                <option value=\"series\">Series</option>\r\n                <option value=\"episode\">Episode</option>\r\n              </select>\r\n            </div>\r\n            <button className=\"form-control btn btn-primary\" onClick={this.getData}>Search</button>\r\n          </form>\r\n        </div>\r\n        <div className=\"row\">\r\n          {dataArray.map((item, index) => {\r\n            return (item.Response === \"True\" ? (\r\n              <div className=\"card col-3 m-4 border border-dark\" key={index}>\r\n                <img src={item.Poster} className=\"card-img-top\" alt=\"\" />\r\n                <div className=\"card-body\">\r\n                  <h5 className=\"card-title\">{item.Title}</h5>\r\n                  <p className=\"card-text\">{item.Released}</p>\r\n                  <a href=\"#\" className=\"btn btn-primary\" onClick={() => this.handleFavourite(item,index)}>\r\n                    {item.favourite ? \"Favourite\" : \"UnFavourite\"}\r\n                  </a>\r\n                </div>\r\n              </div>\r\n            ) : (\r\n                <div class=\"alert alert-danger alert-dismissible\">\r\n                    <a href=\"#\" class=\"close\" data-dismiss=\"alert\" aria-label=\"close\">&times;</a>\r\n                    <strong>{item.Error}</strong>\r\n                </div>\r\n            ))\r\n          })\r\n          }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MovieSearch;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Favourites extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            favouritesMovies: \"\"\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({favouritesMovies: JSON.parse(localStorage.getItem(\"moviesArray\"))});\r\n    }\r\n\r\n    render() {\r\n        const {favouritesMovies} = this.state;\r\n        if(!favouritesMovies) {\r\n            return <h3 className=\"text-center\">No Favourites Present</h3>\r\n        }\r\n        return (\r\n            <div className=\"container\">\r\n                <h1 className=\"text-center\">Your Favourites</h1>\r\n                <div className=\"row\">\r\n                    {favouritesMovies.map((item, index) => {\r\n                        return item.favourite === true &&\r\n                        <div className=\"card col-3 m-4 border border-dark\" key={index}>\r\n                            <img src={item.Poster} className=\"card-img-top\" alt=\"\" />\r\n                            <div className=\"card-body\">\r\n                            <h5 className=\"card-title\">{item.Title}</h5>\r\n                            <p className=\"card-text\">{item.Released}</p>\r\n                            </div>\r\n                        </div>\r\n                    })}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Favourites;","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Link, BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport MovieSearch from './components/movie-search';\nimport Favourites from './components/favourites';\n\nfunction App() {\n    return (\n      <Router> \n        <div className=\"container\"> \n          <nav className=\"navbar navbar-light bg-light\">\n            <Link className=\"nav-link font-weight-bold text-black-50\" to=\"/\">Home</Link>\n            <Link className=\"nav-link font-weight-bold text-black-50\" to=\"/favorites\">Favourites</Link>\n          </nav>\n          <Switch> \n            <Route exact path='/home' component={MovieSearch}></Route> \n            <Route exact path='/favorites' component={Favourites}></Route> \n          </Switch> \n        </div> \n      </Router>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}